from django.shortcuts import render
from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.core.paginator import Paginator, PageNotAnInteger, EmptyPage
from apps.leasing.models import Exploitation,Consommable,ConsommableExploitation
from apps.leasing.forms import  ExploitationForm,ConsommableExploitationFormset
from django.db.models import F                               
from django.contrib import messages

@login_required
def index(request):
    exploitation_list = Exploitation.objects.all()
    paginator = Paginator(exploitation_list, 5)
    page = request.GET.get('page', 1)
    
    try:
        exploitation_lists = paginator.page(page)
    except PageNotAnInteger:
        exploitation_lists = paginator.page(1)
    except EmptyPage:
        exploitation_lists = paginator.page(paginator.num_pages)
    except:
        imprimante_lists = paginator.page(1)
    return render(request,"servicedsi/index.html",{
    'page':'leasing',
    'subpage':'exploitation',
    'exploitation_lists':exploitation_lists
    })


# Les autres fonctions comme show, create, update, delete... 

def show(request, id):
    sav_request = get_object_or_404(Exploitation, id=id)
    form_detail = ExploitationForm(sav_request)
    return render(request, 'servicedsi/leasing/exploitation/detail.html', {'form_detail': form_detail}) 


def create(request):
    if request.method == 'POST':
        form = ExploitationForm(request.POST)
        formset = ConsommableExploitationFormset(request.POST)
        if form.is_valid() and formset.is_valid():
            exploitation = form.save(commit=False)
            exploitation = form.save()
            for form in formset:
                if form.cleaned_data:
                    consommable = form.cleaned_data['consommable']
                    quantite = form.cleaned_data['quantite']
            
                    consommable_instance = Consommable.objects.get(pk=consommable.pk)
                    if quantite > consommable_instance.quantite:
                        # Si la quantité est supérieure, afficher un message d'erreur
                        messages.error(request, f"Quantité de {consommable_instance.reference} insuffisante.")
                    else:
                        # Si la quantité est suffisante, déduire la quantité de consommable
                        consommable_instance.quantite = F('quantite') - quantite
                        consommable_instance.save()

                        # Créer la relation dans ConsommableExploitation
                        ConsommableExploitation.objects.create(
                            exploitation=exploitation,
                            consommable =consommable,
                            quantite    =quantite
                        )

            messages.success(request, "Exploitation créée avec succès.")
            return redirect("leasing:leasing-exploi-list")
        else:
            form = ExploitationForm()
            formset = ConsommableExploitationFormset()
        return render(request, 'servicedsi/leasing/exploitation/formAdd.html', {'form': form, 'formset': formset})
    else:
        form = ExploitationForm()
        formset = ConsommableExploitationFormset()
    return render(request, 'servicedsi/leasing/exploitation/formAdd.html', {'form': form,
                                                                           'formset':formset})
def update(request, id):
    get_exploitaion = get_object_or_404(Exploitation, id=id)

    if request.method == 'POST':
        if request.POST.get('_method') == 'PUT':
            form = ExploitationForm(request.POST,instance=get_exploitaion)
            if form.is_valid():
                form.save()
                messages.success(request, 'Exploitation has been updated !')
                return redirect('leasing:exploitation-list')
        else:
            form = ExploitationForm(instance=get_exploitaion)
    else:
        form = ExploitationForm(instance=get_exploitaion)
    return render(request, 'servicedsi/leasing/exploitation/formUpd.html', {'form': form, 'get_exploitaion': get_exploitaion})

"""
def delete(request, id):
    leasinglisteimprimante = get_object_or_404(LeasingListeimprimante, id=id)
    if request.method == 'POST':
        if request.POST.get('_method') == 'DELETE':
            leasinglisteimprimante.delete()
            messages.success(request, 'LeasingListeimprimante has been deleted !')
    return redirect('leasinglisteimprimante_index')


"""